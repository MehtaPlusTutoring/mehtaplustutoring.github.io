{"version":3,"sources":["components/mehtapluslogo.png","components/view_computer.png","components/TabBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AntTabs","withStyles","root","indicator","backgroundColor","Tabs","AntTab","theme","textTransform","minWidth","fontSize","fontWeight","typography","fontWeightRegular","marginRight","spacing","fontFamily","join","color","opacity","fontWeightMedium","selected","props","Tab","disableRipple","useStyles","makeStyles","flexGrow","padding","demo1","palette","background","paper","demo2","NavTabs","classes","React","useState","value","setValue","className","Grid","container","item","xs","href","src","logo","alt","class","onChange","event","newValue","aria-label","label","to","path","About","Users","exact","Home","stockimg","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,qSCiBrCC,EAAUC,YAAW,CACzBC,KAAM,GAGNC,UAAW,CACTC,gBAAiB,YALLH,CAObI,KAEGC,EAASL,aAAW,SAACM,GAAD,MAAY,CACpCL,KAAM,CACJM,cAAe,OACfC,SAAU,GACVC,SAAU,GACVC,WAAYJ,EAAMK,WAAWC,kBAC7BC,YAAaP,EAAMQ,QAAQ,GAC3BC,WAAY,CACV,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAC,KAAK,KACP,UAAW,CACTC,MAAO,UACPC,QAAS,GAEX,aAAc,CACZD,MAAO,UACPP,WAAYJ,EAAMK,WAAWQ,kBAE/B,UAAW,CACTF,MAAO,YAGXG,SAAU,MA/BGpB,EAgCX,SAACqB,GAAD,OAAW,kBAACC,EAAA,EAAD,eAAKC,eAAa,GAAKF,OAEhCG,EAAYC,aAAW,SAACnB,GAAD,MAAY,CACvCL,KAAM,CACJyB,SAAU,GAEZC,QAAS,CACPA,QAASrB,EAAMQ,QAAQ,IAEzBc,MAAO,CACLzB,gBAAiBG,EAAMuB,QAAQC,WAAWC,OAE5CC,MAAO,CACL7B,gBAAiB,eAIN,SAAS8B,IACtB,IAAMC,EAAUV,IADgB,EAENW,IAAMC,UAAU,GAFV,mBAEzBC,EAFyB,KAElBC,EAFkB,KAQhC,OACE,yBAAKC,UAAWL,EAAQjC,MACtB,yBAAKsC,UAAWL,EAAQN,OACxB,kBAACY,EAAA,EAAD,CAAMC,WAAS,EAAC3B,QAAS,GACzB,kBAAC0B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACT,uBAAGC,KAAK,wCAAuC,yBAAKC,IAAKC,IAAMC,IAAI,OAAOC,MAAM,gBAEpF,kBAACR,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,6BACA,6BACA,kBAAC5C,EAAD,CAASsC,MAAOA,EAAOY,SAdZ,SAACC,EAAOC,GAC3Bb,EAASa,IAa8CC,aAAW,eAC1D,kBAAC/C,EAAD,CAAQgD,MAAM,uBACd,kBAAChD,EAAD,CAAQgD,MAAM,kBACd,kBAAChD,EAAD,CAAQgD,MAAM,gBAIpB,kBAAC,IAAD,KACA,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACH,KAAK,KAChB,kBAACI,EAAD,YAcZ,SAASA,IACP,OAAO,yBAAKX,MAAQ,WAAWH,IAAKe,IAAUb,IAAI,qBAGpD,SAASS,IACP,OAAO,qCAGT,SAASC,IACP,OAAO,qCCvIMI,MARf,WACE,OACE,oCACE,kBAAC5B,EAAD,QCGc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.26478e48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mehtapluslogo.1b946cd8.png\";","module.exports = __webpack_public_path__ + \"static/media/view_computer.6ff0b7a0.png\";","import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Grid from '@material-ui/core/Grid';\nimport logo from './mehtapluslogo.png';\nimport './components.css';\nimport stockimg from './view_computer.png';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nconst AntTabs = withStyles({\n  root: {\n   // borderBottom: '1px solid #e8e8e8',\n  },\n  indicator: {\n    backgroundColor: '#1890ff',\n  },\n})(Tabs);\n\nconst AntTab = withStyles((theme) => ({\n  root: {\n    textTransform: 'none',\n    minWidth: 70,\n    fontSize: 22,\n    fontWeight: theme.typography.fontWeightRegular,\n    marginRight: theme.spacing(8),\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    '&:hover': {\n      color: '#40a9ff',\n      opacity: 1,\n    },\n    '&$selected': {\n      color: '#1890ff',\n      fontWeight: theme.typography.fontWeightMedium,\n    },\n    '&:focus': {\n      color: '#40a9ff',\n    },\n  },\n  selected: {},\n}))((props) => <Tab disableRipple {...props} />);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  padding: {\n    padding: theme.spacing(3),\n  },\n  demo1: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  demo2: {\n    backgroundColor: '#2e1534',\n  },\n}));\n\nexport default function NavTabs() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(-1);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.demo1}>\n      <Grid container spacing={3}>\n      <Grid item xs={6}>\n            <a href=\"https://mehtaplustutoring.github.io/\"><img src={logo} alt=\"logo\" class=\"logophoto\"/></a>\n        </Grid>\n        <Grid item xs={6}>\n            <br></br>\n            <br></br>\n            <AntTabs value={value} onChange={handleChange} aria-label=\"ant example\">  \n            <AntTab label=\"Students & Parents\" />\n            <AntTab label=\"Organizations\" />\n            <AntTab label=\"About Us\" />\n            </AntTabs>\n        </Grid>\n      </Grid>\n      <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n  \n    </Router>\n      </div>\n    </div>\n    \n  );\n}\n\n //<br></br>\n\nfunction Home() {\n  return <img class = \"stockpic\" src={stockimg} alt=\"Viewing Computer\"/>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}","import React from 'react';\nimport './App.css';\nimport NavTabs from \"./components/TabBar.js\";\n//import Box from '@material-ui/core/Box';\n//<PageNavbar />\n\nfunction App() {\n  return (\n    <>\n      <NavTabs></NavTabs>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}